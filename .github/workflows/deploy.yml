# Configuration for publishing archives to PyPI and documentation pages to
# GitHub Pages using GitHub Actions
name: deploy

# Only run for pushes to the master branch and releases.
on:
  push:
    branches:
      - master
      # FOR TESTING REMOVE BEFORE MERGING
      - deploy-docs
  release:
    types:
      - published

# Use bash by default in all jobs
defaults:
  run:
    # The -l {0} is necessary for conda environments to be activated
    shell: bash -l {0}

jobs:

  #############################################################################
  # Publish built wheels and source archives to PyPI and test PyPI
  pypi:
    name: PyPI
    runs-on: ubuntu-latest
    # Only publish from the origin repository, not forks
    if: github.repository == 'fatiando/pooch'

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
        with:
          # Need to fetch more than the last commit so that versioneer can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version will still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          persist-credentials: false

      # Need the tags so that versioneer can form a valid version number
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install requirements
        run: python -m pip install setuptools twine wheel

      - name: List installed packages
        run: python -m pip freeze

      - name: Build source and wheel distributions
        run: |
          # Change the versioneer format to "pre" so that the commit hash isn't
          # included (PyPI doesn't allow it). Can't do this permanently because
          # we rely the hash to indicate to the tests that this is a local
          # verison instead of a published version.
          sed --in-place "s/pep440/pep440-pre/g" setup.cfg
          python setup.py sdist bdist_wheel
          echo ""
          echo "Generated files:"
          ls -lh dist/

      - name: Check the archives
        run: twine check dist/*

      #- name: Publish to Test PyPI
        #if: success()
        ## Pin to a specific commit to avoid having the authentication token
        ## stolen if the Action is compromised:
        ## https://github.com/pypa/gh-action-pypi-publish/issues/27#issuecomment-596082795
        #uses: pypa/gh-action-pypi-publish@bce3b74dbf8cc32833ffba9d15f83425c1a736e0
        #with:
          #user: __token__
          #password: ${{ secrets.TEST_PYPI_TOKEN}}
          #repository_url: https://test.pypi.org/legacy/
          ## Allow existing releases on test PyPI without errors.
          ## NOT TO BE USED in PyPI!
          #skip_existing: true

      #- name: Publish to PyPI
        ## Only publish to PyPI when a release triggers the build
        #if: success() && github.event_name == 'release'
        #uses: pypa/gh-action-pypi-publish@bce3b74dbf8cc32833ffba9d15f83425c1a736e0
        #with:
          #user: __token__
          #password: ${{ secrets.PYPI_TOKEN}}

  #############################################################################
  # Publish the documentation to gh-pages
  docs:
    name: docs
    runs-on: ubuntu-latest
    # Only publish from the origin repository, not forks
    if: github.repository == 'fatiando/pooch'
    env:
      CONDA_REQUIREMENTS: requirements.txt
      CONDA_REQUIREMENTS_DEV: requirements-dev.txt
      CONDA_REQUIREMENTS_OPTIONAL: requirements-optional.txt
      CONDA_INSTALL_EXTRA:
      DEPENDENCIES:
      PYTHON: 3.8

    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
        with:
          # Need to fetch more than the last commit so that versioneer can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 100
          persist-credentials: false

      # Need the tags so that versioneer can form a valid version number
      - name: Fetch git tags
        run: git fetch origin 'refs/tags/*:refs/tags/*'

      - name: Setup caching for conda packages
        uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ runner.os }}-${{ env.PYTHON }}-${{ hashFiles('requirements*.txt') }}

      - name: Setup miniconda
        uses: goanpeca/setup-miniconda@v1
        with:
          python-version: ${{ env.PYTHON }}
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge
          show-channel-urls: true
          activate-environment: testing
          # Needed for caching
          use-only-tar-bz2: true

      - name: Install requirements
        run: |
          requirements_file=full-conda-requirements.txt
          if [ ! -z "$CONDA_REQUIREMENTS" ]; then
              echo "Capturing dependencies from $CONDA_REQUIREMENTS"
              cat $CONDA_REQUIREMENTS >> $requirements_file
          fi
          if [ ! -z "$CONDA_REQUIREMENTS_DEV" ]; then
              echo "Capturing dependencies from $CONDA_REQUIREMENTS_DEV"
              cat $CONDA_REQUIREMENTS_DEV >> $requirements_file
          fi
          if [ "$DEPENDENCIES" == "optional" ]; then
              echo "Capturing optional dependencies from $CONDA_REQUIREMENTS_OPTIONAL"
              cat $CONDA_REQUIREMENTS_OPTIONAL >> $requirements_file
          fi
          if [ ! -z "$CONDA_INSTALL_EXTRA" ]; then
              echo "Capturing extra dependencies: $CONDA_INSTALL_EXTRA"
              echo "# Extra" >> $requirements_file
              # Use xargs to print one argument per line
              echo $CONDA_INSTALL_EXTRA | xargs -n 1 >> $requirements_file
          fi
          if [ -f $requirements_file ]; then
              echo "Collected dependencies:"
              cat $requirements_file
              echo ""
              conda install --quiet --file $requirements_file python=$PYTHON
          else
              echo "No requirements defined."
          fi

      - name: List installed packages
        run: conda list

      - name: Build source and wheel distributions
        run: |
          python setup.py sdist bdist_wheel
          echo ""
          echo "Generated files:"
          ls -lh dist/

      - name: Install the package
        run: pip install --no-deps dist/*.whl

      - name: Build the documentation
        run: make -C doc clean all

      - name: Checkout gh-pages
        uses: actions/checkout@28c7f3d2b5162b5ddd3dfd9a45aa55eaf396478b
        with:
          ref: gh-pages-test
          path: deploy
          # Download the entire history
          fetch-depth: 0

      - name: Push to gh-pages
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
              version="${GITHUB_REF#refs/*/}"
          else
              version=dev
          fi
          bla="${GITHUB_REF#refs/*/}"
          echo $bla
          bla="${GITHUB_REF}"
          echo $bla
          echo ""
          cd deploy
          ls
