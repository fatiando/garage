# Configuration for testing and deploying with GitHub Actions
name: Test

# Only build PRs, the master branch, and tags. Pushes to branches will only be
# built when a PR is opened.
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*

# Use bash by default in all jobs
defaults:
  run:
    # The -l {0} is necessary for conda environments to be activated
    shell: bash -l {0}

###############################################################################
jobs:

  # Run tests, build the docs, and deploy if needed
  test:
    name: ${{ matrix.os }} ${{ matrix.python }} ${{ matrix.dependencies }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      # Otherwise, the workflow would stop if a single job fails. We want to
      # run all of them to catch failures in different combinations.
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python: [3.6, 3.7, 3.8]
        dependencies: [""]
        include:
          - os: ubuntu
            python: 3.8
            dependencies: optional
          - os: macos
            python: 3.8
            dependencies: optional
          - os: windows
            python: 3.8
            dependencies: optional
    env:
      CONDA_REQUIREMENTS: requirements.txt
      CONDA_REQUIREMENTS_DEV: requirements-dev.txt
      CONDA_INSTALL_EXTRA: codecov
      CONDA_INSTALL_OPTIONAL: tqdm paramiko
      DEPENDENCIES: ${{ matrix.dependencies }}
      # Used to tag codecov submissions
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python }}

    steps:

      # Cancel all workflows that are still pending
      - name: Cancel uncompleted workflows
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      # Checks-out your repository under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Need to fetch more than the last commit so that versioneer can
          # create the correct version string. If the number of commits since
          # the last release is greater than this, the version still be wrong.
          # Increase if necessary.
          fetch-depth: 50

      # Need the tags so that versioneer can form a valid version number
      - name: Fetch git tags
        run: |
          git fetch origin 'refs/tags/*:refs/tags/*'
          git tag --list

      - name: Setup Miniconda
        uses: goanpeca/setup-miniconda@v1
        with:
          python-version: ${{ matrix.python }}
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge
          show-channel-urls: true
          activate-environment: testing

      - name: Install requirements
        run: |
          requirements_file=full-conda-requirements.txt
          if [ ! -z "$CONDA_REQUIREMENTS" ]; then
              echo "Capturing dependencies from $CONDA_REQUIREMENTS"
              cat $CONDA_REQUIREMENTS >> $requirements_file
          fi
          if [ ! -z "$CONDA_REQUIREMENTS_DEV" ]; then
              echo "Capturing dependencies from $CONDA_REQUIREMENTS_DEV"
              cat $CONDA_REQUIREMENTS_DEV >> $requirements_file
          fi
          if [ ! -z "$CONDA_INSTALL_EXTRA" ]; then
              echo "Capturing extra dependencies: $CONDA_INSTALL_EXTRA"
              echo "# Extra" >> $requirements_file
              # Use xargs to print one argument per line
              echo $CONDA_INSTALL_EXTRA | xargs -n 1 >> $requirements_file
          fi
          if [ "$DEPENDENCIES" == "optional" ]; then
              echo "Capturing optional dependencies: $CONDA_INSTALL_OPTIONAL"
              echo "# Optional" >> $requirements_file
              # Use xargs to print one argument per line
              echo $CONDA_INSTALL_OPTIONAL | xargs -n 1 >> $requirements_file
          fi
          if [ -f $requirements_file ]; then
              echo "Collected dependencies:"
              cat $requirements_file
              echo ""
              conda install --quiet --file $requirements_file python=$PYTHON
          else
              echo "No requirements defined."
          fi

      - name: List installed packages
        run: conda list

      - name: Install the package
        run: |
          python setup.py sdist
          pip install dist/*

      - name: Test
        run: |
          make test
          # Convert the coverage results to XML for exporting to codecov
          coverage xml

      - name: Build the documentation
        run: make -C doc clean all

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          env_vars: OS,PYTHON,DEPENDENCIES
          fail_ci_if_error: true
